<?xml version="1.0"?>
<ruleset name="HM">

	<description>Human Made coding standards.</description>

	<config name="installed_paths" value="vendor/wp-coding-standards/wpcs,vendor/fig-r/psr2r-sniffer" />

	<file>.</file>

	<exclude-pattern>node_modules/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>

	<arg name="basepath" value="." />
	<arg name="extensions" value="php" />

	<autoload>bootstrap.php</autoload>

	<rule ref="WordPress-Core">
		<!-- Allow with or without semicolons. -->
		<exclude name="Squiz.PHP.EmbeddedPhp.NoSemicolon" />

		<!-- Exclude other conflicting rules. -->
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned" />

		<!--
		OK, real talk right now. Yoda conditions are ridiculous.

		The fundamental problem that Yoda conditions attempts to solve is:
		the equality operator is very close to the assignment operator.
		It's easy to mess up and accidentally assign to the variable you're
		trying to check.

		Here's the thing though. Yoda conditions just don't read correctly
		in the code flow. They require you to change the way you think
		about the control flow.

		Rather than forcing every conditional to be backwards, why not ban
		assignment from conditionals? You never really *need* to assign in
		a conditional.

		So, here's where I stand: no to Yoda conditions. Yes to banning
		assignment in conditionals.
		-->
		<exclude name="WordPress.PHP.YodaConditions" />

		<exclude name="WordPress.Security.EscapeOutput" />
	</rule>

	<!-- Prefer alignment over line length. -->
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="maxColumn" value="1000" />
		</properties>
	</rule>

	<rule ref="WordPress.DB.SlowDBQuery" />

	<!-- Allow . in hook names. -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="." />
		</properties>
	</rule>

	<rule ref="WordPress.Security.PluginMenuSlug" />
	<rule ref="WordPress.Security.PluginMenuSlug.Using__FILE__">
		<type>error</type>
	</rule>

	<!-- Allow the use of filesystem functions. -->
	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" value="file_get_contents,file_system_read" />
		</properties>
	</rule>

	<rule ref="WordPress.WP.CronInterval" />
	<rule ref="WordPress.WP.CronInterval.CronSchedulesInterval">
		<type>error</type>
		<message>Scheduling crons at %s sec ( less than %s minutes ) is prohibited.</message>
	</rule>

	<rule ref="WordPress.WP.PostsPerPage" />
	<rule ref="WordPress.WP.PostsPerPage.posts_per_page_numberposts">
		<type>error</type>
	</rule>
	<rule ref="WordPress.WP.PostsPerPage.posts_per_page_posts_per_page">
		<type>error</type>
	</rule>

	<rule ref="WordPress.WP.TimezoneChange" />

	<!--
	HM Rules / HM RULEZZZZ

	https://engineering.hmn.md/how-we-work/style/php/
	-->

	<!-- File Layout: Declare symbols or run code, but not both. -->
		<rule ref="PSR1.Files.SideEffects" />

	<!-- File Layout: Classes in own file. -->
		<!-- Handled in Classes/OnlyClassInFileSniff. -->
		<!-- Also handled in PSR1.Classes.ClassDeclaration below. -->

	<!-- File Layout: Order: `namespace`, `use`, `const`, code. -->
		<!-- Handled in Layout/OrderSniff. -->

	<!-- File Naming: `name/space/`. -->
		<!-- Handled in Files/NamespaceDirectoryNameSniff. -->

	<!-- File Naming: `class-classname.php`. -->
		<!-- Handled in Files/ClassNameFileSniff. -->

	<!-- File Naming: `namespace.php`. -->
		<!-- Handled in Files/FunctionFileNameSniff. -->

	<!-- File Naming: `plugin.php` or `functions.php`. -->

	<!-- Namespacing: Required for classes. -->
		<rule ref="PSR1.Classes.ClassDeclaration" />

	<!-- Namespacing: Required for functions. -->
		<!-- Handled in Functions/NamespacedFunctionsSniff. -->
		<rule ref="PSR2.Namespaces.NamespaceDeclaration" />

	<!-- Namespacing: `use` statements. -->
		<rule ref="PSR2.Namespaces.UseDeclaration">
			<exclude name="PSR2.Namespaces.UseDeclaration.MultipleDeclarations" />
		</rule>
		<rule ref="PSR2R.Namespaces.UnusedUseStatement" />
		<rule ref="PSR2R.Namespaces.UseInAlphabeticalOrder" />

	<!-- Namespacing: No backslash with `use`. -->
		<!-- Handled in Namespaces/NoLeadingSlashOnUseSniff. -->

	<!-- Yoda Conditions: Ban inline assignment in control structures. See note above. -->
		<rule ref="PSR2R.ControlStructures.NoInlineAssignment" />

	<!-- Anonymous Functions: Spaces after `function` and `use`. -->
		<!-- Handled in Squiz.Functions.MultiLineFunctionDeclaration. -->

	<!-- Array Creation: Short syntax. -->
		<!-- Handled in Arrays/ForceShortArraysSniff. -->
		<rule ref="Generic.Arrays.DisallowLongArraySyntax" />

	<!-- TEMPLATE RULES / TEMPLATES RULE -->
	<!-- Namespacing: No namespace -->

	<!-- Inline Statements: Single statement on same line -->
		<rule ref="Generic.Formatting.DisallowMultipleStatements" />

</ruleset>
